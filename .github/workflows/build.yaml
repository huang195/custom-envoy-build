name: Build Envoy

on:
  workflow_dispatch:
    inputs:
      envoy_version:
        description: 'Envoy version (e.g., v1.28.0, or "main" for latest)'
        default: 'main'
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout Envoy
      uses: actions/checkout@v4
      with:
        repository: envoyproxy/envoy
        ref: ${{ inputs.envoy_version }}
        
    - name: Login to Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Envoy
      run: |
        # Use official Envoy build image directly instead of CI script
        docker run --rm \
          -v "$(pwd):/source" \
          -v "$PWD/build-output:/build" \
          -w /source \
          envoyproxy/envoy-build-ubuntu:f4a881a1205e8e6db1a57162faf3df7aed88eae8@sha256:b10346fe2eee41733dbab0e02322c47a538bf3938d093a5daebad9699860b814 \
          bash -c "
            # Configure build
            cat > .bazelrc.local << 'EOF'
        build --define=wasm=enabled
        build --compilation_mode=opt
        build --config=libc++
        build --define=hot_restart=disabled
        build --define=liburing=disabled
        build --disk_cache=/build/bazel-cache
        build --repository_cache=/build/repo-cache
        build --verbose_failures
        EOF
            
            # Build Envoy
            bazel build //source/exe:envoy-static
            
            # Copy to output location
            mkdir -p /build
            cp bazel-bin/source/exe/envoy-static /build/envoy-static
            chmod +x /build/envoy-static
          "
        
        # Move binary to expected location
        mkdir -p bazel-bin/source/exe
        cp build-output/envoy-static bazel-bin/source/exe/envoy-static
        
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM envoyproxy/envoy:v1.28.0 as base
        FROM ubuntu:22.04
        
        RUN apt-get update && apt-get install -y --no-install-recommends \
            ca-certificates curl libc++1 libc++abi1 && \
            rm -rf /var/lib/apt/lists/*
            
        COPY bazel-bin/source/exe/envoy-static /usr/local/bin/envoy
        COPY --from=base /docker-entrypoint.sh /docker-entrypoint.sh
        
        RUN chmod +x /usr/local/bin/envoy /docker-entrypoint.sh && \
            groupadd --gid 101 envoy && \
            useradd --uid 101 --gid envoy --shell /bin/false envoy
            
        EXPOSE 10000 9901
        USER envoy
        ENTRYPOINT ["/docker-entrypoint.sh"]
        CMD ["envoy", "--version"]
        EOF
        
    - name: Build and Push Image
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        echo "âœ… Image pushed: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
